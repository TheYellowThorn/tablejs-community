import { SortDirection } from './sort-direction';
export class SortOptions {
    get directionOrder() {
        return this._directionOrder;
    }
    set directionOrder(order) {
        this._sortDirectionIndex = -1;
        this._directionOrder = order;
    }
    get sortDirection() {
        return this._sortDirectionIndex === -1
            ? SortDirection.NONE
            : this._directionOrder[this._sortDirectionIndex];
    }
    set sortDirection(direction) {
        this._sortDirectionIndex = this._directionOrder.indexOf(direction);
    }
    constructor(variableIdentifier, comparator, initialSortDirection = SortDirection.NONE, ignoreCase = true, sortOrder = 0, useLocalCompare = false, localeCompareOptions = null) {
        this.ignoreTimeOfDay = true;
        this._directionOrder = [SortDirection.ASCENDING, SortDirection.DESCENDING, SortDirection.NONE];
        this._sortDirectionIndex = -1;
        this.variableIdentifier = variableIdentifier;
        this.comparator = comparator;
        this.initialSortDirection = initialSortDirection;
        this.ignoreCase = ignoreCase;
        this.sortOrder = sortOrder;
        this.useLocaleCompare = useLocalCompare;
        this.localeCompareOptions = localeCompareOptions;
        this.sortDirection = this.initialSortDirection;
    }
    nextSortDirection() {
        this._sortDirectionIndex++;
        if (this._sortDirectionIndex >= this._directionOrder.length) {
            this._sortDirectionIndex = 0;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdGFibGVqcy9zcmMvbGliL2ZpbHRlckFuZFNvcnQvb3B0aW9ucy9zb3J0LW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELE1BQU0sT0FBTyxXQUFXO0lBc0J0QixJQUFJLGNBQWM7UUFNaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLGNBQWMsQ0FDaEIsS0FLRztRQUVILElBQUksQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztJQUMvQixDQUFDO0lBSUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsbUJBQW1CLEtBQUssQ0FBQyxDQUFDO1lBQ3BDLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSTtZQUNwQixDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsSUFBSSxhQUFhLENBQ2YsU0FJc0I7UUFFdEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxZQUNFLGtCQUEwQixFQUMxQixVQUFnRCxFQUNoRCx1QkFJOEIsYUFBYSxDQUFDLElBQUksRUFDaEQsYUFBc0IsSUFBSSxFQUMxQixZQUFvQixDQUFDLEVBQ3JCLGtCQUEyQixLQUFLLEVBQ2hDLHVCQUErRixJQUFJO1FBL0RyRyxvQkFBZSxHQUFZLElBQUksQ0FBQztRQU1oQyxvQkFBZSxHQUtULENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQXVCdEUsd0JBQW1CLEdBQVcsQ0FBQyxDQUFDLENBQUM7UUErQnZDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztRQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7UUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztRQUN4QyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7UUFFakQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUM7SUFDakQsQ0FBQztJQUVNLGlCQUFpQjtRQUN0QixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUUzQixJQUFJLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRTtZQUMzRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVNvcnRPcHRpb25zIH0gZnJvbSAnLi9pLXNvcnQtb3B0aW9ucyc7XG5pbXBvcnQgeyBTb3J0RGlyZWN0aW9uIH0gZnJvbSAnLi9zb3J0LWRpcmVjdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBTb3J0T3B0aW9ucyBpbXBsZW1lbnRzIElTb3J0T3B0aW9ucyB7XG4gIHB1YmxpYyBpZDogc3RyaW5nO1xuICB2YXJpYWJsZUlkZW50aWZpZXI6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIGluaXRpYWxTb3J0RGlyZWN0aW9uOlxuICAgIHwgbnVtYmVyXG4gICAgfCBTb3J0RGlyZWN0aW9uLkRFU0NFTkRJTkdcbiAgICB8IFNvcnREaXJlY3Rpb24uTk9ORVxuICAgIHwgU29ydERpcmVjdGlvbi5BU0NFTkRJTkc7XG4gIGlnbm9yZUNhc2U6IGJvb2xlYW47XG4gIGlnbm9yZVRpbWVPZkRheTogYm9vbGVhbiA9IHRydWU7XG4gIHNvcnRPcmRlcjogbnVtYmVyO1xuICBjb21wYXJhdG9yOiAodmFsdWVBOiBhbnksIHZhbHVlQjogYW55KSA9PiBudW1iZXI7XG4gIHZhcmlhYmxlTWFwcGVyPzogRnVuY3Rpb24gfCBudWxsO1xuICB1c2VMb2NhbGVDb21wYXJlOiBib29sZWFuO1xuICBsb2NhbGVDb21wYXJlT3B0aW9uczogW3N0cmluZyB8IHN0cmluZ1tdXSB8IFtzdHJpbmcgfCBzdHJpbmdbXSwgSW50bC5Db2xsYXRvck9wdGlvbnNdIHwgbnVsbDtcbiAgX2RpcmVjdGlvbk9yZGVyOiAoXG4gICAgfCBudW1iZXJcbiAgICB8IFNvcnREaXJlY3Rpb24uQVNDRU5ESU5HXG4gICAgfCBTb3J0RGlyZWN0aW9uLkRFU0NFTkRJTkdcbiAgICB8IFNvcnREaXJlY3Rpb24uTk9ORVxuICApW10gPSBbU29ydERpcmVjdGlvbi5BU0NFTkRJTkcsIFNvcnREaXJlY3Rpb24uREVTQ0VORElORywgU29ydERpcmVjdGlvbi5OT05FXTtcblxuICBnZXQgZGlyZWN0aW9uT3JkZXIoKTogKFxuICAgIHwgbnVtYmVyXG4gICAgfCBTb3J0RGlyZWN0aW9uLkFTQ0VORElOR1xuICAgIHwgU29ydERpcmVjdGlvbi5ERVNDRU5ESU5HXG4gICAgfCBTb3J0RGlyZWN0aW9uLk5PTkVcbiAgKVtdIHtcbiAgICByZXR1cm4gdGhpcy5fZGlyZWN0aW9uT3JkZXI7XG4gIH1cblxuICBzZXQgZGlyZWN0aW9uT3JkZXIoXG4gICAgb3JkZXI6IChcbiAgICAgIHwgbnVtYmVyXG4gICAgICB8IFNvcnREaXJlY3Rpb24uQVNDRU5ESU5HXG4gICAgICB8IFNvcnREaXJlY3Rpb24uREVTQ0VORElOR1xuICAgICAgfCBTb3J0RGlyZWN0aW9uLk5PTkVcbiAgICApW11cbiAgKSB7XG4gICAgdGhpcy5fc29ydERpcmVjdGlvbkluZGV4ID0gLTE7XG4gICAgdGhpcy5fZGlyZWN0aW9uT3JkZXIgPSBvcmRlcjtcbiAgfVxuXG4gIHByaXZhdGUgX3NvcnREaXJlY3Rpb25JbmRleDogbnVtYmVyID0gLTE7XG5cbiAgZ2V0IHNvcnREaXJlY3Rpb24oKTogbnVtYmVyfCBTb3J0RGlyZWN0aW9uLkFTQ0VORElORyB8IFNvcnREaXJlY3Rpb24uREVTQ0VORElORyB8IFNvcnREaXJlY3Rpb24uTk9ORSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvcnREaXJlY3Rpb25JbmRleCA9PT0gLTFcbiAgICAgID8gU29ydERpcmVjdGlvbi5OT05FXG4gICAgICA6IHRoaXMuX2RpcmVjdGlvbk9yZGVyW3RoaXMuX3NvcnREaXJlY3Rpb25JbmRleF07XG4gIH1cblxuICBzZXQgc29ydERpcmVjdGlvbihcbiAgICBkaXJlY3Rpb246XG4gICAgICB8IG51bWJlclxuICAgICAgfCBTb3J0RGlyZWN0aW9uLkFTQ0VORElOR1xuICAgICAgfCBTb3J0RGlyZWN0aW9uLkRFU0NFTkRJTkdcbiAgICAgIHwgU29ydERpcmVjdGlvbi5OT05FXG4gICkge1xuICAgIHRoaXMuX3NvcnREaXJlY3Rpb25JbmRleCA9IHRoaXMuX2RpcmVjdGlvbk9yZGVyLmluZGV4T2YoZGlyZWN0aW9uKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHZhcmlhYmxlSWRlbnRpZmllcjogc3RyaW5nLFxuICAgIGNvbXBhcmF0b3I6ICh2YWx1ZUE6IGFueSwgdmFsdWVCOiBhbnkpID0+IG51bWJlcixcbiAgICBpbml0aWFsU29ydERpcmVjdGlvbjpcbiAgICAgIHwgbnVtYmVyXG4gICAgICB8IFNvcnREaXJlY3Rpb24uREVTQ0VORElOR1xuICAgICAgfCBTb3J0RGlyZWN0aW9uLk5PTkVcbiAgICAgIHwgU29ydERpcmVjdGlvbi5BU0NFTkRJTkcgPSBTb3J0RGlyZWN0aW9uLk5PTkUsXG4gICAgaWdub3JlQ2FzZTogYm9vbGVhbiA9IHRydWUsXG4gICAgc29ydE9yZGVyOiBudW1iZXIgPSAwLFxuICAgIHVzZUxvY2FsQ29tcGFyZTogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGxvY2FsZUNvbXBhcmVPcHRpb25zOiBbc3RyaW5nIHwgc3RyaW5nW11dIHwgW3N0cmluZyB8IHN0cmluZ1tdLCBJbnRsLkNvbGxhdG9yT3B0aW9uc10gfCBudWxsID0gbnVsbFxuICApIHtcbiAgICB0aGlzLnZhcmlhYmxlSWRlbnRpZmllciA9IHZhcmlhYmxlSWRlbnRpZmllcjtcbiAgICB0aGlzLmNvbXBhcmF0b3IgPSBjb21wYXJhdG9yO1xuICAgIHRoaXMuaW5pdGlhbFNvcnREaXJlY3Rpb24gPSBpbml0aWFsU29ydERpcmVjdGlvbjtcbiAgICB0aGlzLmlnbm9yZUNhc2UgPSBpZ25vcmVDYXNlO1xuICAgIHRoaXMuc29ydE9yZGVyID0gc29ydE9yZGVyO1xuICAgIHRoaXMudXNlTG9jYWxlQ29tcGFyZSA9IHVzZUxvY2FsQ29tcGFyZTtcbiAgICB0aGlzLmxvY2FsZUNvbXBhcmVPcHRpb25zID0gbG9jYWxlQ29tcGFyZU9wdGlvbnM7XG5cbiAgICB0aGlzLnNvcnREaXJlY3Rpb24gPSB0aGlzLmluaXRpYWxTb3J0RGlyZWN0aW9uO1xuICB9XG5cbiAgcHVibGljIG5leHRTb3J0RGlyZWN0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMuX3NvcnREaXJlY3Rpb25JbmRleCsrO1xuXG4gICAgaWYgKHRoaXMuX3NvcnREaXJlY3Rpb25JbmRleCA+PSB0aGlzLl9kaXJlY3Rpb25PcmRlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3NvcnREaXJlY3Rpb25JbmRleCA9IDA7XG4gICAgfVxuICB9XG59XG4iXX0=