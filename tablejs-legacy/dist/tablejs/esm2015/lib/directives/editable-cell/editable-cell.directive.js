import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';
export class EditableCellDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.validator = null;
        this.validatorParams = [];
        this.regExp = null;
        this.regExpFlags = 'gi';
        this.list = [];
        this.cellInput = new EventEmitter();
        this.cellFocusOut = new EventEmitter();
        this.cellValidation = new EventEmitter();
        this.option = null;
        this.lastText = null;
        this.originalText = null;
        this.lastValidInput = null;
        this.containerDiv = document.createElement('div');
        this.input = document.createElement('input'); // Create an <input> node
        this.input.type = 'text';
        this.dataList = document.createElement('datalist');
    }
    onKeyDownHandler(event) {
        if (document.activeElement === this.input) {
            this.input.blur();
            this.input.removeEventListener('focusout', this.onFocusOut);
        }
    }
    onClick(event) {
        let hasInput = false;
        if (this.elementRef.nativeElement.children) {
            for (let i = 0; i < this.elementRef.nativeElement.children.length; i++) {
                if (this.elementRef.nativeElement.children[i] === this.containerDiv) {
                    hasInput = true;
                }
            }
        }
        if (!hasInput) {
            this.input.value = this.elementRef.nativeElement.innerText;
            this.lastText = this.input.value;
            this.originalText = this.elementRef.nativeElement.innerText;
            this.elementRef.nativeElement.appendChild(this.containerDiv);
            this.containerDiv.appendChild(this.input);
            if (this.list.length > 0) {
                this.createDataList();
            }
            this.validateInput();
            this.input.focus();
            this.onFocusOut = () => {
                if (this.elementRef.nativeElement.contains(this.containerDiv)) {
                    this.elementRef.nativeElement.removeChild(this.containerDiv);
                }
                this.cellInput.emit(this.getCellObject());
                this.cellFocusOut.emit(this.getCellObject());
                this.input.removeEventListener('focusout', this.onFocusOut);
            };
            this.input.addEventListener('focusout', this.onFocusOut);
        }
        this.cellInput.emit(this.getCellObject());
    }
    createDataList() {
        let count = 0;
        let id = 'data-list-' + count.toString();
        while (document.getElementById(id) !== null && document.getElementById(id) !== undefined) {
            count++;
            id = 'data-list-' + count.toString();
        }
        this.dataList.setAttribute('id', id);
        this.elementRef.nativeElement.appendChild(this.containerDiv);
        this.containerDiv.appendChild(this.dataList);
        this.list.forEach(value => {
            const filteredDataList = Array.from(this.dataList.options).filter(option => option.value === value);
            if (filteredDataList.length === 0) {
                this.option = document.createElement('option');
                this.dataList.appendChild(this.option);
                this.option.value = value;
            }
        });
        this.input.setAttribute('list', id);
    }
    ngOnInit() {
        this.input.value = this.elementRef.nativeElement.innerText;
    }
    ngAfterViewInit() {
        this.input.value = this.elementRef.nativeElement.innerText;
        this.lastText = this.input.value;
        this.input.addEventListener('input', () => {
            if (this.regExp) {
                const regEx = new RegExp(this.regExp, this.regExpFlags);
                if (regEx.test(this.input.value)) {
                    this.validateInput();
                    this.lastText = this.input.value;
                    this.cellInput.emit(this.getCellObject());
                }
                else {
                    this.input.value = this.lastText;
                }
            }
            else {
                this.validateInput();
                this.cellInput.emit(this.getCellObject());
            }
        });
    }
    getCellObject() {
        return {
            currentValue: this.input.value,
            lastValidInput: this.lastValidInput,
            originalValue: this.originalText,
            inputHasFocus: document.activeElement === this.input
        };
    }
    validateInput() {
        const validationOk = this.validator ? this.validator.apply(null, [this.input.value].concat(this.validatorParams)) : true;
        if (validationOk) {
            this.input.classList.remove('error');
            this.lastValidInput = this.input.value;
        }
        else {
            this.input.classList.add('error');
        }
        this.cellValidation.emit(validationOk);
    }
}
EditableCellDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tablejsEditableCell], [tablejseditablecell], [tablejs-editable-cell]',
                host: { class: 'tablejs-editable-cell' }
            },] }
];
EditableCellDirective.ctorParameters = () => [
    { type: ElementRef }
];
EditableCellDirective.propDecorators = {
    initialData: [{ type: Input, args: ['tablejsEditableCell',] }],
    validator: [{ type: Input }],
    validatorParams: [{ type: Input }],
    regExp: [{ type: Input }],
    regExpFlags: [{ type: Input }],
    list: [{ type: Input }],
    cellInput: [{ type: Output }],
    cellFocusOut: [{ type: Output }],
    cellValidation: [{ type: Output }],
    onKeyDownHandler: [{ type: HostListener, args: ['document:keydown.enter', ['$event'],] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,