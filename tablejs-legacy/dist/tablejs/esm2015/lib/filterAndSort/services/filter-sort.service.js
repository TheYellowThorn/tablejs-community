import { Injectable } from '@angular/core';
import { Comparator } from './../comparators/comparator';
import { SortDirection } from '../options/sort-direction';
import * as i0 from "@angular/core";
export class FilterSortService {
    constructor() {
        this.autoDefineUnsetProperties = false;
        Comparator.filterSortService = this;
    }
    get currentFilterOptions() {
        return this._currentFilterOptions;
    }
    get currentSortOptions() {
        return this._currentSortOptions;
    }
    get itemsBeingFilteredAndSorted() {
        return this._items;
    }
    filterAndSortItems(items, filterOptions, sortOptions) {
        let filteredItems;
        this._items = items;
        filteredItems = items;
        if (filterOptions) {
            if (Array.isArray(filterOptions)) {
                const filterOptionsLen = filterOptions.length;
                for (let i = 0; i < filterOptionsLen; i++) {
                    const options = filterOptions[i];
                    this._currentFilterOptions = options;
                    filteredItems = this.filterItemsByVarNames(filteredItems, options);
                }
            }
            else {
                filteredItems = this.filterItemsByVarNames(filteredItems, filterOptions);
            }
        }
        if (sortOptions) {
            if (Array.isArray(sortOptions)) {
                filteredItems = this.multiSortItemsByVarName(filteredItems, sortOptions);
            }
            else {
                filteredItems = this.sortItemsByVarName(filteredItems, sortOptions);
            }
        }
        return filteredItems;
    }
    isString(val) {
        return typeof val === 'string' || val instanceof String;
    }
    filterItemsByVarNames(items, filterOptions) {
        this._currentFilterOptions = filterOptions;
        if (!filterOptions) {
            throw Error('A FilterOptions object is not defined. Please supply filter options to sort items by.');
        }
        const varNames = this.isString(filterOptions.variableIdentifiers)
            ? [filterOptions.variableIdentifiers]
            : filterOptions.variableIdentifiers;
        this.ignoreCase = filterOptions.ignoreCase;
        if (items === null || items === undefined) {
            throw Error('Item array is not defined. Please supply a defined array to filter.');
        }
        if (items.length === 0) {
            return items;
        }
        this.filterSplits = [];
        const numOfVarNames = varNames && varNames.length > 0 ? varNames.length : 0;
        for (let i = 0; i < numOfVarNames; i++) {
            this.splitVariablesFromIdentifier(varNames[i]);
            this.filterSplits.push(this.splits);
        }
        this.filterSplitsLen = this.filterSplits.length;
        items = items.concat();
        items = items.filter(filterOptions.comparator);
        return items;
    }
    splitVariablesFromIdentifier(varName) {
        if (varName === null || varName === undefined || varName === '') {
            this.splits = [];
            this.splitsLen = this.splits.length;
            return;
        }
        const containsBrackets = varName.includes('[');
        this.splits = varName.split('.');
        this.splitsLen = this.splits.length;
        if (containsBrackets) {
            const bracketSplits = [];
            for (let i = 0; i < this.splitsLen; i++) {
                let split = this.splits[i];
                let startBracketIndex = split.indexOf('[');
                if (startBracketIndex !== -1) {
                    while (split !== '') {
                        const endBracketIndex = split.indexOf(']') + 1;
                        const preBracketVar = split.substring(0, startBracketIndex);
                        const brackets = split.substring(startBracketIndex + 1, endBracketIndex - 1);
                        const postBracketVar = split.substring(endBracketIndex, split.length);
                        split = postBracketVar;
                        startBracketIndex = split.indexOf('[');
                        if (preBracketVar !== '') {
                            bracketSplits.push(preBracketVar);
                        }
                        bracketSplits.push(brackets);
                    }
                }
                else {
                    bracketSplits.push(split);
                }
            }
            this.splits = bracketSplits;
        }
        this.splitsLen = this.splits.length;
        let varStr = '(array item)';
        this.varNames = [varStr];
        for (let i = 0; i < this.splitsLen; i++) {
            this.vName = this.splits[i];
            if (isNaN(Number(this.vName))) {
                varStr += '.' + this.vName;
            }
            else {
                varStr += '[' + this.vName + ']';
            }
            this.varNames.push(varStr);
        }
    }
    sortItemsByVarName(items, sortOptions) {
        this._currentSortOptions = sortOptions;
        if (!sortOptions) {
            throw Error('A SortOptions object is not defined. Please supply filter options to sort items by.');
        }
        const varName = sortOptions.variableIdentifier;
        this.sortDirection = sortOptions.sortDirection;
        this.ignoreCase = sortOptions.ignoreCase;
        if (items === null || items === undefined) {
            throw Error('Item array is not defined. Please supply a defined array to sort.');
        }
        if (items.length === 0) {
            return items;
        }
        this.splitVariablesFromIdentifier(varName);
        items = items.concat();
        if (this.sortDirection !== SortDirection.NONE) {
            items.sort(sortOptions.comparator);
        }
        return items;
    }
    multiSortItemsByVarName(items, sortOptionsGroup) {
        sortOptionsGroup.sort((sortOptionsA, sortOptionsB) => {
            if (!sortOptionsA || !sortOptionsB) {
                return 0;
            }
            const orderA = sortOptionsA.sortOrder;
            const orderB = sortOptionsB.sortOrder;
            if (orderA === orderB) {
                return 0;
            }
            return orderA > orderB ? 1 : -1;
        });
        sortOptionsGroup.forEach((sortOptions) => {
            items = this.sortItemsByVarName(items, sortOptions);
        });
        return items;
    }
    getFilterValuesFromPropertyIndentifiers(value) {
        this.filterSplitsLen = this.filterSplits.length;
        const vals = this.filterSplitsLen === 0 ? [value] : [];
        for (let j = 0; j < this.filterSplitsLen; j++) {
            let varA = value;
            const splits = this.filterSplits[j];
            const splitsLen = splits.length;
            for (let i = 0; i < splitsLen; i++) {
                this.vName = splits[i];
                if (!varA.hasOwnProperty(this.vName)) {
                    if (!this.autoDefineUnsetProperties) {
                        throw Error(`Property ${this.vName} not found on ${this.varNames[i]}`);
                    }
                    this.defineProperty(varA, this.vName);
                }
                else {
                    varA = varA[this.vName];
                }
            }
            vals.push(varA);
        }
        return vals;
    }
    defineProperty(obj, propName, value = undefined, writable = true) {
        Object.defineProperty(obj, propName, {
            value: value,
            writable: writable
        });
    }
    getSortValuesFromPropertyIdentifiers(valueA, valueB) {
        let varA = valueA;
        let varB = valueB;
        for (let i = 0; i < this.splitsLen; i++) {
            this.vName = this.splits[i];
            if (!varA.hasOwnProperty(this.vName) ||
                !varB.hasOwnProperty(this.vName)) {
                throw Error(`Property ${this.vName} not found on ${this.varNames[i]}`);
            }
            varA = varA[this.vName];
            varB = varB[this.vName];
        }
        return [varA, varB];
    }
}
FilterSortService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FilterSortService_Factory() { return new FilterSortService(); }, token: FilterSortService, providedIn: "root" });
FilterSortService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
FilterSortService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,